AWSTemplateFormatVersion: '2010-09-09'
Description: A REST API that sends commands to the CI Christmas Tree
Transform:
- 'AWS::Serverless-2016-10-31'

Parameters:
  IoTTopic:
    Type: String
    Description: The name of the topic to allow the API to publish to (this should be the same one the Pi is listening)
    Default: mytree

Resources:
  IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ci-api-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ci-api-iot-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:Publish
                Resource:
                  - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IoTTopic}
        - PolicyName: ci-api-cloudwatch-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:TagLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"

  CreateBuild:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'ci-api-create-build'
      Environment:
        Variables:
          topic: !Ref IoTTopic
      Runtime: python3.7
      CodeUri: app
      Handler: build.create
      Description: Create Build
      Timeout: 10
      Events:
        GET:
          Type: Api
          Properties:
            Path: /build/{buildId}/create
            Method: get
      Role: !GetAtt IamRole.Arn
    DependsOn:
      - IamRole

  SucceedBuild:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'ci-api-succeed-build'
      Environment:
        Variables:
          topic: !Ref IoTTopic
      Runtime: python3.7
      CodeUri: app
      Handler: build.succeed
      Description: Succeed Build
      Timeout: 10
      Events:
        GET:
          Type: Api
          Properties:
            Path: /build/{buildId}/succeed
            Method: get
      Role: !GetAtt IamRole.Arn
    DependsOn:
      - IamRole

  FailBuild:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'ci-api-fail-build'
      Environment:
        Variables:
          topic: !Ref IoTTopic
      Runtime: python3.7
      CodeUri: app
      Handler: build.fail
      Description: Fail Build
      Timeout: 10
      Events:
        GET:
          Type: Api
          Properties:
            Path: /build/{buildId}/fail
            Method: get
      Role: !GetAtt IamRole.Arn
    DependsOn:
      - IamRole

  ResetBuild:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'ci-api-reset-build'
      Environment:
        Variables:
          topic: !Ref IoTTopic
      Runtime: python3.7
      CodeUri: app
      Handler: build.reset
      Description: Reset Tree
      Timeout: 10
      Events:
        GET:
          Type: Api
          Properties:
            Path: /reset
            Method: get
      Role: !GetAtt IamRole.Arn
    DependsOn:
      - IamRole